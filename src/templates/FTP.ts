import type { Page } from "@playwright/test";

export class FTP {
  private page: Page;

  public constructor(page: Page) {
    this.page = page;
  }

  FTP_JSON = {
    FTP_EXPORT: {
      application: "adaptorType",
      FTP: "action",
      connection: "_connectionId",
      save: "action",
      name: "name",
      "file.type": "type",
      "ftp.directoryPath": "directoryPath",
      "ftp.fileNameStartsWith": "fileNameStartsWith",
      Advanced: "action",
      "file.encoding": "encoding",
      "file.skipDelete": "skipDelete",
      "Custom settings": "action",
      "rowsToSkip": "rowsToSkip",
      "trimSpaces": "trimSpaces",
      "hasHeaderRow": "hasHeaderRow",
      "ftp.fileNameEndsWith": "fileNameEndsWith",
      "How would you like to group and sort records?": "action",
      "custom:[id='file.groupByFields']": "groupByFields",
      "file.decompressFiles": "true",
      "file.compressionFormat": "compressionFormat",
      "pgpdecrypt": "true",
      "file.decrypt": "decrypt",
      "resourcePath": "resourcePath",
      "dataURITemplate": "dataURITemplate",
      "V0_json": "true",
      "file.json.resourcePath": "resourcePath",
      "file.xlsx.hasHeaderRow": "hasHeaderRow",
      "custom:[id='file.filedefinition.rules'] div div .MuiButton-disableElevation": "action",
      "custom:[id='rule']": "qa__data",
      "custom:[id='data']": "qa__Samplefile",
      "edifact.format": "qa__ediformat",
      "edix12.format": "qa__ediformat",
      "pageSize": "pageSize",
      "file.backupPath": "backupPath",
      "outputMode": "records",
      saveAndClose: "action"
    },
    FTP_IMPORT: {
      application: "adaptorType",
      FTP: "action",
      connection: "_connectionId",
      save: "action",
      name: "name",
      "file.type": "type",
      "ftp.directoryPath": "directoryPath",
      "ftp.useTempFile": "true",
      "ftp.inProgressFileName": "inProgressFileName",
      "transferFiles": "action",
      "exportType": "transferFiles",
      "oneToMany": true,
      "pathToMany": "pathToMany",
      "file.json.body": "action",
      "custom:[id='rule']": "body",
      Advanced: "action",
      "custom:[data-test='file.batchSize']": "batchSize",
      "file.compressFiles": "true",
      "file.compressionFormat": "compressionFormat",
      "uploadFile": "qa__path",
      "file.xml.body": "action",
      "custom:[id='file.filedefinition.rules'] div div .MuiButton-disableElevation": "action",
      "custom:[id='data']": "qa__Samplefile",
      "edix12.format": "qa__ediformat",
      "edifact.format": "qa__ediformat",
      "fixed.format": "qa__fixedwidthformat",
      "file.fileName": "fileName",
      "pgpencrypt": true,
      "file.encrypt": "encrypt",
      "file.skipAggregation": true,
      "text-columnDelimiter": "columnDelimiter",
      "file.pgp.symmetricKeyAlgorithm": "symmetricKeyAlgorithm",
      "file.pgp.hashAlgorithm": "hashAlgorithm",
      "rowDelimiter": "rowDelimiter",
      "file.encoding": "encoding",
      "file.backupPath": "backupDirectoryPath",
      "replaceNewlineWithSpace": "replaceNewlineWithSpace",
      "replaceTabWithSpace": "replaceTabWithSpace",
      "truncateLastRowDelimiter": "truncateLastRowDelimiter",
      "wrapWithQuotes": "wrapWithQuotes",
      saveAndClose: "action"
    },
    FTP_BLOB_EXPORT: {
      "exportType": "lookupFiles",
      "ftp.fileNameEndsWith": "fileNameEndsWith",
      "ftp.fileNameStartsWith": "fileNameStartsWith",
      "file.skipDelete": "skipDelete",
      fileMetadata: "action",
      "pageSize": "pageSize",
      saveAndClose: "action"
    },
    FTP_BLOB_IMPORT: {
      transferFiles: "action",
      "exportType": "transferFiles",
      "oneToMany": true,
      "pathToMany": "pathToMany",
      Advanced: "action",
      "blobKeyPath": "blobKeyPath",
      saveAndClose: "action"
    }
  };
}
