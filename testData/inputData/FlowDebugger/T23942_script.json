{
  "transform": {
    "name": "function transformation",
    "content": "/*\n* transformFunction stub:\n*\n* The name of the function can be changed to anything you like.\n*\n* The function will be passed one 'options' argument that has the following fields:\n*   'record' - object {} or array [] depending on the data source.\n*   'settings' - all custom settings in scope for the transform currently running.\n* The function needs to return the transformed record.\n* Throwing an exception will return an error for the record.\n*/\nfunction transform (options) {\n  return option\n}"
  },
  "preSavePage": {
    "name": "presave1script",
    "content": "/*\n* preMapFunction stub:\n*\n* The name of the function can be changed to anything you like.\n*\n* The function will be passed one ‘options’ argument that has the following fields:\n*   ‘data’ - an array of records representing the page of data before it has been mapped.  A record can be an object {} or array [] depending on the data source.\n*   '_importId' - the _importId currently running.\n*   '_connectionId' - the _connectionId currently running.\n*   '_flowId' - the _flowId currently running.\n*   '_integrationId' - the _integrationId currently running.\n*   'settings' - all custom settings in scope for the import currently running.\n*   'testMode' - Boolean flag that executes script only on test mode and preview/send actions.\n*\n* The function needs to return an array, and the length MUST match the options.data array length.\n* Each element in the array represents the actions that should be taken on the record at that index.\n* Each element in the array should have the following fields:\n*   'data' - the modified/unmodified record that should be passed along for processing.\n*   'errors' -  used to report one or more errors for the specific record.  Each error must have the following structure: {code: '', message: '', source: ‘’ }\n* Returning an empty object {} for a specific record will indicate that the record should be ignored.\n* Returning both 'data' and 'errors' for a specific record will indicate that the record should be processed but errors should also be logged.\n* Throwing an exception will fail the entire page of records.\n*/\nfunction preMap (options) {\n  return options.data.map((d) => {\n    return {\n      data\n    }\n  })\n}\n/*\n* preSavePageFunction stub:\n*\n* The name of the function can be changed to anything you like.\n*\n* The function will be passed one 'options' argument that has the following fields:\n*   'data' - an array of records representing one page of data. A record can be an object {} or array [] depending on the data source.\n*   'files' - file exports only. files[i] contains source file metadata for data[i]. i.e. files[i].fileMeta.fileName.\n*   'errors' - an array of errors where each error has the structure {code: '', message: '', source: '', retryDataKey: ''}.\n*   'retryData' - a dictionary object containing the retry data for all errors: {retryDataKey: { data: <record>, stage: '', traceKey: ''}}.\n*   '_exportId' - the _exportId currently running.\n*   '_connectionId' - the _connectionId currently running.\n*   '_flowId' - the _flowId currently running.\n*   '_integrationId' - the _integrationId currently running.\n*   'pageIndex' - 0 based. context is the batch export currently running.\n*   'lastExportDateTime' - delta exports only.\n*   'currentExportDateTime' - delta exports only.\n*   'settings' - all custom settings in scope for the export currently running.\n*   'testMode' - Boolean flag that executes script only on test mode and preview/send actions.\n*\n* The function needs to return an object that has the following fields:\n*   'data' - your modified data.\n*   'errors' - your modified errors.\n*   'abort' - instruct the batch export currently running to stop generating new pages of data.\n*   'newErrorsAndRetryData' - return brand new errors linked to retry data: [{retryData: <record>, errors: [<error>]}].\n* Throwing an exception will signal a fatal error and stop the flow.\n*/\nfunction preSavePage (options) {\n  // sample code that simply passes on what has been exported\n  return {\n    data: option,\n    errors: option,\n    abort: false,\n    newErrorsAndRetryData: []\n  }\n}"
  },
  "filter": {
    "name": "fliter method",
    "content": "/*\n* filterFunction stub:\n*\n* The name of the function can be changed to anything you like.\n*\n* The function will be passed one 'options' argument that has the following fields:\n*   'record' - object {} or array [] depending on the data source.\n*   'pageIndex' - 0 based. context is the batch export currently running.\n*   'lastExportDateTime' - delta exports only.\n*   'currentExportDateTime' - delta exports only.\n*   'settings' - all custom settings in scope for the filter currently running.\n* The function needs to return true or false.  i.e. true indicates the record should be processed.\n* Throwing an exception will return an error for the record.\n*/\nfunction filter (options) {\n  return tru\n}"
  }
}