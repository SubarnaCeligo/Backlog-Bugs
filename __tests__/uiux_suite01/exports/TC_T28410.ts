import { expect, test } from "@celigo/ui-core-automation";
import * as selectors from "@celigo/aut-selectors";

test.describe("T28410 Verify XML parser for FTP,Gdrive,S3,dropbox if the xml element contains xmlns or if the element name contains ':' with proper resource path and Parse strategy as Automatic", () => {
    test.beforeEach(async ({ io }) => {
        await io.myAccountPage.navigateTo(io.data.links.HOME_PAGE_URL);
    });
    test("Verify XML parser for FTP if the xml element contains xmlns or if the element name contains ':' with proper resource path and Parse strategy as Automatic", async ({ io, page }) => {
        await io.homePage.navigateTo(process.env["IO_Integration_URL"]);
        await io.homePage.click(selectors.flowBuilderPagePO.CREATEFLOW);
        await io.flowBuilder.click(selectors.flowBuilderPagePO.ADD_SOURCE);
        await io.flowBuilder.fill(selectors.settingsPagePO.APP_NAME_INPUT, 'FTP');
        await io.flowBuilder.click(selectors.flowBuilderPagePO.FTP);
        await io.flowBuilder.click(selectors.connectionsPagePO.CONNECTIONS_DROPDOWN);
        await io.flowBuilder.fill(selectors.connectionsPagePO.CONNECTIONS_DROPDOWN, 'FTP CONNECTION');
        await io.flowBuilder.clickByText('FTP CONNECTION');
        await io.flowBuilder.click(selectors.basePagePO.SAVE);
        await io.flowBuilder.click(selectors.exportsPagePO.FILE_TYPE);
        await io.flowBuilder.clickByText('XML');
        let fileInput1 = await page.$(selectors.basePagePO.UPLOAD_FILE);
        await fileInput1.setInputFiles("testData/inputData/Exports/T28410.xml");
        await io.connectionPage.addStep("Upload invalid xml");
        await io.flowBuilder.click(selectors.basePagePO.LAUNCH_PARSER);
        await page.getByLabel('Automatic').nth(1).click();
        await io.flowBuilder.fill(selectors.flowBuilderPagePO.RESOUCEPATH, '/Items');
        await io.flowBuilder.click(selectors.flowBuilderPagePO.PREVIEW);
        await io.connectionPage.addStep("Clicking on preview");
        await expect(page.locator(selectors.flowBuilderPagePO.AFE_RESULT_PANEL)).toContainText("ns1:Item");
        await io.flowBuilder.fill(selectors.flowBuilderPagePO.RESOUCEPATH, '/Items/ns1:Item');
        await io.flowBuilder.click(selectors.flowBuilderPagePO.PREVIEW);
        await io.connectionPage.addStep("Clicking on preview");
        await expect(page.locator(selectors.flowBuilderPagePO.AFE_RESULT_PANEL)).toContainText("record");
    });
    test("Verify XML parser Gdrive if the xml element contains xmlns or if the element name contains ':' with proper resource path and Parse strategy as Automatic", async ({ io, page }) => {
        await io.homePage.navigateTo(process.env["IO_Integration_URL"]);
        await io.homePage.click(selectors.flowBuilderPagePO.CREATEFLOW);
        await io.flowBuilder.click(selectors.flowBuilderPagePO.ADD_SOURCE);
        await io.flowBuilder.fill(selectors.settingsPagePO.APP_NAME_INPUT, 'Google Drive');
        await io.flowBuilder.clickByText('Google Drive');
        await io.flowBuilder.click(selectors.connectionsPagePO.CONNECTIONS_DROPDOWN);
        await io.flowBuilder.fill(selectors.connectionsPagePO.CONNECTIONS_DROPDOWN, 'GOOGLEDRIVE CONNECTION');
        await io.flowBuilder.clickByText('GOOGLEDRIVE CONNECTION');
        await io.flowBuilder.click(selectors.basePagePO.SAVE);
        await io.flowBuilder.click(selectors.exportsPagePO.FILE_TYPE);
        await io.flowBuilder.clickByText('XML');
        let fileInput1 = await page.$(selectors.basePagePO.UPLOAD_FILE);
        await fileInput1.setInputFiles("testData/inputData/Exports/T28410.xml");
        await io.connectionPage.addStep("Upload invalid xml");
        await io.flowBuilder.click(selectors.basePagePO.LAUNCH_PARSER);
        await page.getByLabel('Automatic').nth(1).click();
        await io.flowBuilder.fillByIndex(selectors.flowBuilderPagePO.RESOUCEPATH, '/Items',1);
        await io.flowBuilder.click(selectors.flowBuilderPagePO.PREVIEW);
        await io.connectionPage.addStep("Clicking on preview");
        await expect(page.locator(selectors.flowBuilderPagePO.AFE_RESULT_PANEL)).toContainText("ns1:Item");
        await io.flowBuilder.fill(selectors.flowBuilderPagePO.RESOUCEPATH, '/Items/ns1:Item');
        await io.flowBuilder.click(selectors.flowBuilderPagePO.PREVIEW);
        await io.connectionPage.addStep("Clicking on preview");
        await expect(page.locator(selectors.flowBuilderPagePO.AFE_RESULT_PANEL)).toContainText("record");
    });
    test("Verify XML parser S3 if the xml element contains xmlns or if the element name contains ':' with proper resource path and Parse strategy as Automatic", async ({ io, page }) => {
        await io.homePage.navigateTo(process.env["IO_Integration_URL"]);
        await io.homePage.click(selectors.flowBuilderPagePO.CREATEFLOW);
        await io.flowBuilder.click(selectors.flowBuilderPagePO.ADD_SOURCE);
        await io.flowBuilder.fill(selectors.settingsPagePO.APP_NAME_INPUT, 'Amazon S3');
        await io.flowBuilder.clickByText('Amazon S3');
        await io.flowBuilder.click(selectors.connectionsPagePO.CONNECTIONS_DROPDOWN);
        await io.flowBuilder.fill(selectors.connectionsPagePO.CONNECTIONS_DROPDOWN, 'S3 CONNECTION');
        await io.flowBuilder.clickByText('S3 CONNECTION');
        await io.flowBuilder.click(selectors.basePagePO.SAVE);
        await io.flowBuilder.click(selectors.exportsPagePO.FILE_TYPE);
        await io.flowBuilder.clickByText('XML');
        let fileInput1 = await page.$(selectors.basePagePO.UPLOAD_FILE);
        await fileInput1.setInputFiles("testData/inputData/Exports/T28410.xml");
        await io.connectionPage.addStep("Upload invalid xml");
        await io.flowBuilder.click(selectors.basePagePO.LAUNCH_PARSER);
        await page.getByLabel('Automatic').nth(1).click();
        await io.flowBuilder.fillByIndex(selectors.flowBuilderPagePO.RESOUCEPATH, '/Items',1);
        await io.flowBuilder.click(selectors.flowBuilderPagePO.PREVIEW);
        await io.connectionPage.addStep("Clicking on preview");
        await expect(page.locator(selectors.flowBuilderPagePO.AFE_RESULT_PANEL)).toContainText("ns1:Item");
        await io.flowBuilder.fill(selectors.flowBuilderPagePO.RESOUCEPATH, '/Items/ns1:Item');
        await io.flowBuilder.click(selectors.flowBuilderPagePO.PREVIEW);
        await io.connectionPage.addStep("Clicking on preview");
        await expect(page.locator(selectors.flowBuilderPagePO.AFE_RESULT_PANEL)).toContainText("record");
    });
    test("Verify XML parser dropbox if the xml element contains xmlns or if the element name contains ':' with proper resource path and Parse strategy as Automatic", async ({ io, page }) => {
        await io.homePage.navigateTo(process.env["IO_Integration_URL"]);
        await io.homePage.click(selectors.flowBuilderPagePO.CREATEFLOW);
        await io.flowBuilder.click(selectors.flowBuilderPagePO.ADD_SOURCE);
        await io.flowBuilder.fill(selectors.settingsPagePO.APP_NAME_INPUT, 'Dropbox');
        await io.flowBuilder.clickByText('Dropbox');
        await io.flowBuilder.click(selectors.connectionsPagePO.TRANSFER_FILES);
        await io.flowBuilder.click(selectors.connectionsPagePO.CONNECTIONS_DROPDOWN);
        await io.flowBuilder.fill(selectors.connectionsPagePO.CONNECTIONS_DROPDOWN, 'DROPBOX CONNECTION');
        await io.flowBuilder.clickByText('DROPBOX CONNECTION');
        await io.flowBuilder.click(selectors.basePagePO.SAVE);
        await io.flowBuilder.click(selectors.exportsPagePO.FILE_TYPE);
        await io.flowBuilder.clickByText('XML');
        let fileInput1 = await page.$(selectors.basePagePO.UPLOAD_FILE);
        await fileInput1.setInputFiles("testData/inputData/Exports/T28410.xml");
        await io.connectionPage.addStep("Upload invalid xml");
        await io.flowBuilder.click(selectors.basePagePO.LAUNCH_PARSER);
        await page.getByLabel('Automatic').nth(1).click();
        await io.flowBuilder.fillByIndex(selectors.flowBuilderPagePO.RESOUCEPATH, '/Items',1);
        await io.flowBuilder.click(selectors.flowBuilderPagePO.PREVIEW);
        await io.connectionPage.addStep("Clicking on preview");
        await expect(page.locator(selectors.flowBuilderPagePO.AFE_RESULT_PANEL)).toContainText("ns1:Item");
        await io.flowBuilder.fill(selectors.flowBuilderPagePO.RESOUCEPATH, '/Items/ns1:Item');
        await io.flowBuilder.click(selectors.flowBuilderPagePO.PREVIEW);
        await io.connectionPage.addStep("Clicking on preview");
        await expect(page.locator(selectors.flowBuilderPagePO.AFE_RESULT_PANEL)).toContainText("record");
    });
}); 
