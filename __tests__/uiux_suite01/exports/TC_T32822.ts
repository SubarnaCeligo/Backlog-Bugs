import { expect, test } from "@celigo/ui-core-automation";
import * as selectors from "@celigo/aut-selectors";
import JS from '../../../testData/inputData/FlowBuilder/T32822.json';
import JS1 from '../../../testData/inputData/FlowBuilder/T328221.json';

test.describe("@Author_sagna123 TC_T32822_Test to validate user is able to update 'useAsPrimaryInterface' value from true to false", () => {
    test.beforeEach(async ({ io }) => {
        await io.myAccountPage.navigateTo(io.data.links.HOME_PAGE_URL);
    });
    test("@Bug-IO-77518 @Priority-P2 @Zephyr-IO-T32822 @Env-All", async ({ io, page }) => {
        await io.homePage.addStep("*** Navigated to home page ***");
        await io.homePage.waitForElementAttached(selectors.basePagePO.RESOURCES);
        await io.homePage.goToMenu("Resources","Exports" );
        await io.homePage.addStep("*** Navigated back to export page ***");
        await io.homePage.click(selectors.basePagePO.ADD_NEW_RESOURCE);
        await io.homePage.addStep("*** Clicked on create export***");
        await io.homePage.fill(selectors.connectionsPagePO.CONNECTION_SEARCH, "FTP");
        await io.homePage.addStep("*** Searched for FTP application ***");
        await io.flowBuilder.loadingTime();
        await io.homePage.click(selectors.flowBuilderPagePO.FTP);
        await io.homePage.addStep("*** Selected FTP application ***");
        await io.homePage.fill(selectors.connectionsPagePO.CONNECTION_INPUT, "FTP CONNECTION" );
        await io.homePage.addStep("*** Clicked on connection dropdown ***");
        await io.homePage.clickByText("FTP CONNECTION");
        await io.homePage.addStep("*** Selected the connection ***");
        await io.homePage.click(selectors.basePagePO.ADD_NAME);
        await page.keyboard.press('/');
        await page.keyboard.press('/');
        await page.keyboard.press('/');
        await io.homePage.addStep("*** Clicked on 'name' field and gave a name to our export ***");
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.click(selectors.basePagePO.SAVE);
        await io.homePage.addStep("*** Opened the export ***");
        await io.flowBuilder.click(selectors.exportsPagePO.FILE_TYPE);
        await io.homePage.addStep("*** Clicked on file type section ***");
        await io.homePage.clickByText("Fixed Width");
        await io.homePage.addStep("*** Selected the Fixed widthe file type ***");
        await io.flowBuilder.click(selectors.exportsPagePO.FIXEDWIDTH_FILEFORMAT);
        await io.homePage.addStep("*** Clicked on file type section ***");
        await io.homePage.clickByText("AgoNow Inbound 810");
        await io.homePage.addStep("*** Selected the Fixed width file format ***");
        await io.homePage.fill(selectors.exportsPagePO.FTP_DIRECTORY_PATH, "/io.auto.qa" );
        await io.homePage.addStep("*** Typed the directory path ***");
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.click(selectors.basePagePO.SAVE);
        await io.homePage.addStep("*** Opened the export ***");
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.click(selectors.flowBuilderPagePO.DATATEST);
        await io.homePage.addStep("*** Clicked on custom settigs section ***");
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.click(selectors.flowBuilderPagePO.EDIT_README);
        await io.homePage.addStep("*** Clicked on form builder section ***");
        await io.flowBuilder.waitForElementAttached(selectors.flowBuilderPagePO.SCRIPT_DATA_CONTENT);
        await io.flowBuilder.click(selectors.flowBuilderPagePO.SCRIPT_DATA_CONTENT);
        await io.flowBuilder.clearTextValue(selectors.flowBuilderPagePO.SCRIPT_DATA_CONTENT);
        await io.flowBuilder.enterHugeData(selectors.flowBuilderPagePO.SCRIPT_DATA_CONTENT, JSON.stringify(JS.text));
        await io.homePage.addStep("*** Validated with useAsPrimary value true ***");
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.click(selectors.basePagePO.SAVE_AND_CLOSE);
        await io.homePage.addStep("*** Saved  the custom settings ***");
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        let howwouldparse = await io.homePage.isVisible(selectors.flowBuilderPagePO.HOW_WOULD_PARSE);
        expect(howwouldparse).toBeFalsy();
        let wherewouldtransfer = await io.homePage.isVisible(selectors.flowBuilderPagePO.WHERE_WOULD_TRANSFER);
        expect(wherewouldtransfer).toBeFalsy();
        let sortandgroup = await io.homePage.isVisible(selectors.flowBuilderPagePO.SORTANDGROUP);
        expect(sortandgroup).toBeFalsy();
        let general = await io.homePage.isVisible(selectors.connectionsPagePO.GENERAL);
        expect(general).toBeTruthy();
        let mockoutput = await io.homePage.isVisible(selectors.flowBuilderPagePO.MOCK_OUTPUT);
        expect(mockoutput).toBeTruthy();
        let customsettings = await io.homePage.isVisible(selectors.flowBuilderPagePO.DATATEST);
        expect(customsettings).toBeTruthy();
        let adavnced = await io.homePage.isVisible(selectors.importPagePO.ADVANCED);
        expect(adavnced).toBeTruthy();
        await io.flowBuilder.click(selectors.flowBuilderPagePO.EDIT_README);
        await io.homePage.addStep("*** Clicked on form builder section ***");
        await io.assert.verifyElementContainsText(selectors.flowBuilderPagePO.SCRIPT_DATA_CONTENT, '"useAsPrimaryInterface": true');
        await io.flowBuilder.waitForElementAttached(selectors.flowBuilderPagePO.SCRIPT_DATA_CONTENT);
        await io.flowBuilder.click(selectors.flowBuilderPagePO.SCRIPT_DATA_CONTENT);
        await io.flowBuilder.clearTextValue(selectors.flowBuilderPagePO.SCRIPT_DATA_CONTENT);
        await io.flowBuilder.enterHugeData(selectors.flowBuilderPagePO.SCRIPT_DATA_CONTENT, JSON.stringify(JS1.text));
        await io.homePage.addStep("*** Validated with useAsPrimary value false ***");
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.click(selectors.basePagePO.SAVE_AND_CLOSE);
        await io.homePage.addStep("*** Saved  the custom settings ***");
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        let howwouldparse1 = await io.homePage.isVisible(selectors.flowBuilderPagePO.HOW_WOULD_PARSE);
        expect(howwouldparse1).toBeTruthy();
        let wherewouldtransfer2 = await io.homePage.isVisible(selectors.flowBuilderPagePO.WHERE_WOULD_TRANSFER);
        expect(wherewouldtransfer2).toBeTruthy();
        let sortandgroup1 = await io.homePage.isVisible(selectors.flowBuilderPagePO.SORTANDGROUP);
        expect(sortandgroup1).toBeTruthy();
        let general1 = await io.homePage.isVisible(selectors.connectionsPagePO.GENERAL);
        expect(general1).toBeTruthy();
        let mockoutput1 = await io.homePage.isVisible(selectors.flowBuilderPagePO.MOCK_OUTPUT);
        expect(mockoutput1).toBeTruthy();
        let customsettings1 = await io.homePage.isVisible(selectors.flowBuilderPagePO.DATATEST);
        expect(customsettings1).toBeTruthy();
        let adavnced1 = await io.homePage.isVisible(selectors.importPagePO.ADVANCED);
        expect(adavnced1).toBeTruthy();
        await io.flowBuilder.click(selectors.flowBuilderPagePO.DATATEST);
        await io.homePage.addStep("*** Clicked on custom settigs section ***");
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.loadingTime();
        await io.flowBuilder.click(selectors.flowBuilderPagePO.EDIT_README);
        await io.homePage.addStep("*** Clicked on form builder section ***");
        await io.assert.verifyElementContainsText(selectors.flowBuilderPagePO.SCRIPT_DATA_CONTENT, '"useAsPrimaryInterface": false');
        await io.myAccountPage.navigateTo(io.data.links.HOME_PAGE_URL);
        await io.homePage.addStep("*** Navigated back to home page ***");
    });
});