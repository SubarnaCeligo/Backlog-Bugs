
import { test, expect } from "@celigo/ui-core-automation";
import * as selectors from "@celigo/aut-selectors";
import { decrypt ,randomNumber} from "@celigo/aut-utilities";
import FTP from "@testData/STANDALONE/TC_C32430.json";

test.describe("TC_C32430", () => {
  let flowID;
  test.beforeEach(async ({io}) => {
    test.step("*** Navigate to Home Page ***", async ()=>{});
    await io.homePage.navigateTo(io.data.links.HOME_PAGE_URL);
    await io.goToFlowsPage();
    await io.homePage.loadingTime();
  });
  test.afterEach(async ({ io }) => {
    await io.api.deleteFlowsWithId([flowID]);
    test.step("** Deleted flow **", async () => { });
  });
  test("@Zephyr-IO-T5844 @Env-All TC_C32430_Verify_Help_text_input_output", async ({io,page}, testInfo) => {
    flowID = await io.createResourceFromAPI(FTP, 'FLOWS');
    await io.flowBuilder.navigateToTheFlow(flowID);

    await io.homePage.loadingTime();
    await io.homePage.isPageReady();

    test.step("*** Clicking on import mapping ***", async ()=>{});
    await io.homePage.click(selectors.flowBuilderPagePO.IMPORT_MAPPINGS);
    test.step("*** Clicking on more actions ***", async ()=>{});

    await io.homePage.loadingTime();
    await io.homePage.isPageReady();
    var input4 = await page.locator(selectors.mappings.MAPPER2DOT0PO.PREVIEWRESOURCE).isVisible();
    await io.assert.expectToBeTrue(input4, "");
    test.step("*** Verified the Input panel  ***", async ()=>{});

    // var input = await page.$$('[data-test="help-text-icon"]');
    // var input1 = await input[input.length - 2];
    // await input1.click();
    await io.homePage.clickButtonByIndex('button[data-test="help-text-icon"]', 6);

    test.step("*** Clicking on input Help Text ***", async ()=>{});
    let namehelptext = await io.homePage.getText(selectors.connectionsPagePO.HELP_BUBBLE);
    await expect(namehelptext).toContain("This is an example of the source application's input data received by the mapping for this flow step. You can also view the data classification (record or row) in this panel.");
    test.step("*** Verified help text  should be displayed for input panel ***", async ()=>{});
    await io.homePage.click(selectors.flowBuilderPagePO.CLOSEBTN);

    input4 = await page.locator(selectors.playgroundPO.FORM_OUTPUT).isVisible();
    await io.assert.expectToBeTrue(input4,"");

    test.step("*** Verified the Output panel  ***", async ()=>{});
    // var output = await page.$$('[data-test="help-text-icon"]');
    // var output1 = await output[output.length - 1];
    // await output1.click();
    await io.homePage.clickButtonByIndex('button[data-test="help-text-icon"]', 7);

    test.step("*** Clicking on output help text***", async ()=>{});
    namehelptext = await io.homePage.getText(selectors.connectionsPagePO.HELP_BUBBLE);
    await expect(namehelptext).toContain("This is an example of the output data generated by your current mapping configuration. You can also view the data classification (record or row) in this panel.");
    test.step("*** Verified help text should be displayed for output panel ***", async ()=>{});
    await io.homePage.click(selectors.flowBuilderPagePO.CLOSEBTN);

    await io.homePage.navigateTo(io.data.links.HOME_PAGE_URL);
    test.step(" Navigating to Home Page", async ()=>{});
  });
});
